#!/usr/bin/python
import sys
import csv

# To run this code on the actual data, please download the additional dataset.
# You can find instructions in the course materials (wiki) and in the instructor notes.
# There are some things in this data file that are different from what you saw
# in Lesson 3. The dataset is more complicated and closer to what you might
# see in the real world. It was generated by exporting data from a SQL database.
# 
# The data in at least one of the fields (the body field) can include newline
# characters, and all the fields are enclosed in double quotes. Therefore, we
# will need to process the data file in a way other than using split(","). To do this, 
# we have provided sample code for using the csv module of Python. Each 'line'
# will be a list that contains each field in sequential order.
# 
# In this exercise, we are interested in the field 'body' (which is the 5th field, 
# line[4]). The objective is to count the number of forum nodes where 'body' either 
# contains none of the three punctuation marks: period ('.'), exclamation point ('!'), 
# question mark ('?'), or else 'body' contains exactly one such punctuation mark as the 
# last character. There is no need to parse the HTML inside 'body'. Also, do not pay
# special attention to newline characters.

id = ""
title = ""
tagnames = ""
authorId = ""
body = ""
nodeType = ""
parentId = ""
absParentId = ""
addedAt = ""
score = ""
stateString = ""
lastEditedId = ""
lastActivityById = ""
lastActivityAt = ""
activeRevisionId = ""
extra = ""
extraRefId = ""
extraCount = ""
marked = ""
data = []

string_to_match=["?","!",".","\n"]

def mapper():
    reader = csv.reader(sys.stdin, delimiter='\t')
    writer = csv.writer(sys.stdout, delimiter='\t', quotechar='"', quoting=csv.QUOTE_ALL)

    for line in reader:

        # YOUR CODE HERE
            
        #writer.writerow(line)
        data = line

        if len(data) > 18:
            try:        
                id, title, tagnames, authorId, body, nodeType, parentId, absParentId, addedAt, score, stateString, lastEditedId, lastActivityById, lastActivityAt, activeRevisionId, extra, extraRefId, extraCount, marked = data
        
                print "{0}\t{1}\t{2}\t3}\t{4}\t{5}\t{6}\t{7}\t{8}\t{9}\t{10}\t{11}\t{12}\t{13}\t{14}\t{15}\t{16}\t{17}\t{18}".format(id, title, tagnames, authorId, body, nodeType, parentId, absParentId, addedAt, score, stateString, lastEditedId, lastActivityById, lastActivityAt, activeRevisionId, extra, extraRefId, extraCount, marked)
            except ValueError:
                print "Error18\t{0}".format(data)
                continue 
        elif len(data) >= 6:
            try:
                id, title, tagnames, authorId, body, nodeType = data
                if not ("?\n" in body or "!\n" in body or ". " in body ):
                    print "{0}\t{1}\t{2}\t{3}\t{4}\t{5}".format(id, title, tagnames, authorId, body, nodeType)
                    #print"{0}".format(body)
            except ValueError:
                print "Error7\t{0}\t{1}".format(data,len(data))
                continue
        else:
            continue

test_text = """\"\"\t\"\"\t\"\"\t\"\"\t\"This is one sentence\"\t\"\"
\"\"\t\"\"\t\"\"\t\"\"\t\"Also one sentence!\"\t\"\"
\"\"\t\"\"\t\"\"\t\"\"\t\"Hey!\nTwo sentences!\"\t\"\"
\"\"\t\"\"\t\"\"\t\"\"\t\"One. Two! Three?\"\t\"\"
\"\"\t\"\"\t\"\"\t\"\"\t\"One Period. Two Sentences\"\t\"\"
\"\"\t\"\"\t\"\"\t\"\"\t\"Three\nlines, one sentence\n\"\t\"\"
"""

# This function allows you to test the mapper with the provided test string
def main():
    import StringIO
    sys.stdin = StringIO.StringIO(test_text)
    mapper()
    sys.stdin = sys.__stdin__

if __name__ == "__main__":
    main()

